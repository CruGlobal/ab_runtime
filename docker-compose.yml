version: "3.2"

volumes:
  config:
  files:
  mysql_config:
  mysql_data:
  mysql_key:
  nginx_etc:
  redis_data:

services:

  #nginx setup
  web:
    image: docker.io/digiserve/ab-web:$AB_WEB_VERSION
    volumes:
      - type: bind
        source: ./nginx/html
        target: /usr/share/nginx/html
      - nginx_etc:/etc
      - files:/data
    depends_on:
      - api_sails
     #/nginx


  #db: use Maria DB as our backend DB
  db:
    image: docker.io/mariadb
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_PASSWORD # from .env
    volumes:
      - mysql_config:/etc/mysql/conf.d
      - mysql_data:/var/lib/mysql
      - mysql_key:/key
    # on windows: use this command. (be sure to clear out mysql/data folder)
    # command: mysqld --innodb-flush-method=littlesync --innodb-use-native-aio=OFF --log_bin=ON
    ######
    # when there is a problem with : Error: ER_CRASHED_ON_USAGE: Table 'AAAAAA' is marked as crashed and should be repaired
    # this can happen with the alter table algorithm: try the safest(and slowest) COPY
    # command: ["mysqld", "--alter-algorithm=copy"]
  #/db


  #redis: use redis to allow cote services to find each other across a swarm
  redis:
    image: docker.io/redis
    ## NOTE: don't expose the service to the outside for security:
    ## if you do expose it, then set a password.
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
  #/redis


  #config: simply exists to pull in the config/local.js into our config volume
  config:
    image: docker.io/digiserve/ab-config:$AB_CONFIG_VERSION
    volumes:
      - type: bind
        source: ./config/local.js
        target: /config_safe/local.js
      - config:/config
    working_dir: /app
    command: ["node", "app.js"]
  #/config


  #api_sails: our API end point
  api_sails:
    image: docker.io/digiserve/ab-api-sails:$AB_API_SAILS_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
      - CAS_ENABLED
      - CAS_BASE_URL
      - CAS_UUID_KEY
      - SITE_URL
      - OKTA_ENABLED
      - OKTA_DOMAIN
      - OKTA_CLIENT_ID
      - OKTA_CLIENT_SECRET
      - RELAY_ENABLED
      - RELAY_SERVER_TOKEN
    volumes:
      - type: bind
        source: ./logs/appbuilder/
        target: /var/log/appbuilder/
      - config:/app/config
      - files:/data
    depends_on:
      - redis
      - config
  #/api_sails


  #appbuilder: (AppBuilder) A multi-tenant aware service to process our AppBuilder requests.
  appbuilder:
    restart: always
    deploy:
      restart_policy:
        delay: 3s
        max_attempts: 5
        window: 60s
    image: docker.io/digiserve/ab-appbuilder:$AB_APPBUILDER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/appbuilder


  #bot_manager: our #slack bot service
  # bot_manager:
  #   image: digiserve/ab-bot-manager:develop
  #   environment:
  #     - COTE_DISCOVERY_REDIS_HOST=redis
  #   volumes:
  #     - config:/app/config
  #     # sharing .sock files currently don't work on docker-for-mac:
  #     # https://github.com/docker/for-mac/issues/483
  #     # For a Mac host, configure config/local.js to hostConnection.tcp
  #     # but it doesn't hurt to include the /tmp dir for all platforms.
  #     - type: bind
  #       source: /tmp
  #       target: /tmp
  #   depends_on:
  #     - redis
  #     - config
  #/bot_manager


  # custom_reports: A microservice for managing custom reports
  custom_reports:
    image: docker.io/digiserve/ab-custom-reports:$AB_CUSTOM_REPORTS_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
      - CUSTOM_REPORTS_ENABLED
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/custom_reports


  #definition_manager: (AppBuilder) A service to manage the definitions for a running AppBuilder platform.
  definition_manager:
    image: docker.io/digiserve/ab-definition-manager:$AB_DEFINITION_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/definition_manager


  #file_processor: A service to manage uploaded files.
  file_processor:
    image: docker.io/digiserve/ab-file-processor:$AB_FILE_PROCESSOR_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
      - files:/data
    depends_on:
      - redis
      - config
  #/file_processor


  #log_manager: (AppBuilder) A log manager for various AB operations
  log_manager:
    image: docker.io/digiserve/ab-log-manager:$AB_LOG_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
      - SENTRY_ENABLED
      - SENTRY_DSN
      - SENTRY_SAMPLE_RATE
      - SENTRY_SERVER_NAME
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/log_manager


  #notification_email: an smtp email service
  notification_email:
    image: docker.io/digiserve/ab-notification-email:$AB_NOTIFICATION_EMAIL_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/notification_email


  #process_manager: (AppBuilder) a micro service to manage our process tasks
  process_manager:
    image: docker.io/digiserve/ab-process-manager:$AB_PROCESS_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/process_manager


  #relay: (Appbuilder} A service to handle the communications with our relay server.
  relay:
    image: docker.io/digiserve/ab-relay:$AB_RELAY_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
      - RELAY_ENABLED
      - RELAY_SERVER_URL
      - RELAY_SERVER_TOKEN
      - RELAY_POLL_FREQUENCY
      - RELAY_MAX_PACKET_SIZE
      - PWA_URL
    hostname: relay
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/relay


  #tenant_manager: (AppBuilder) A service to manage the site's tenants
  tenant_manager:
    image: docker.io/digiserve/ab-tenant-manager:$AB_TENANT_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/tenant_manager


  #user_manager: (AppBuilder) A microservice for managing Users
  user_manager:
    image: docker.io/digiserve/ab-user-manager:$AB_USER_MANAGER_VERSION
    environment:
      - COTE_DISCOVERY_REDIS_HOST=redis
      - MYSQL_PASSWORD # from .env
    volumes:
      - config:/app/config
    depends_on:
      - redis
      - config
  #/user_manager


#  #watchtower: monitor and update our running containers
#  watchtower:
#    image: v2tec/watchtower
#    volumes:
#      # - /var/run/docker.sock:/var/run/docker.sock
#      - type: bind
#        source: /var/run/docker.sock
#        target: /var/run/docker.sock
#    command: --interval 10 --debug
#  #/watchtower
